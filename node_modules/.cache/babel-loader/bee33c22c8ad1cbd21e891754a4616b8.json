{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:\\\\development\\\\milkybae\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\defineProperty.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeConfig = exports.getGatekeeperEndpoint = exports.GATEKEEPER_ENDPOINTS = exports.urlToCluster = exports.clusterEndpoint = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar clusterEndpoint = function clusterEndpoint(cluster) {\n  switch (cluster) {\n    case 'civicnet':\n      return 'https://d3ab7dlfud2b5u.cloudfront.net';\n\n    case 'localnet':\n      return 'http://localhost:8899';\n\n    default:\n      return (0, web3_js_1.clusterApiUrl)(cluster);\n  }\n};\n\nexports.clusterEndpoint = clusterEndpoint; // reverse lookup of cluster from url\n// note - this is a \"best-guess\" heuristic. If the client passes an unrecognised\n// url, default to mainnet\n\nvar urlToCluster = function urlToCluster(clusterUrl) {\n  var supportedClusters = ['devnet', 'testnet', 'mainnet-beta', 'civicnet', 'localnet'];\n  var matchedUrlCluster = supportedClusters.find(function (cluster) {\n    return (0, exports.clusterEndpoint)(cluster) === clusterUrl;\n  });\n  if (matchedUrlCluster) return matchedUrlCluster;\n  var matchedStringCluster = supportedClusters.find(function (cluster) {\n    return clusterUrl.indexOf(cluster) >= 0;\n  });\n  if (matchedStringCluster) return matchedStringCluster;\n  return 'mainnet-beta';\n};\n\nexports.urlToCluster = urlToCluster;\nvar solanaVersionedEndpoint = 'v1/token/solana';\nexports.GATEKEEPER_ENDPOINTS = {\n  local: \"http://localhost:3001/local/\".concat(solanaVersionedEndpoint),\n  test: \"http://localhost:3001/local/\".concat(solanaVersionedEndpoint),\n  dev: \"https://dev-gatekeeper-api.civic.com/\".concat(solanaVersionedEndpoint),\n  preprod: \"https://preprod-gatekeeper-api.civic.com/\".concat(solanaVersionedEndpoint),\n  prod: \"https://gatekeeper-api.civic.com/\".concat(solanaVersionedEndpoint)\n};\n\nvar getGatekeeperEndpoint = function getGatekeeperEndpoint(stage) {\n  var endpoint = exports.GATEKEEPER_ENDPOINTS[stage];\n\n  if (!endpoint) {\n    throw new Error(\"Invalid stage \".concat(stage));\n  }\n\n  return endpoint;\n};\n\nexports.getGatekeeperEndpoint = getGatekeeperEndpoint;\n\nvar makeConfig = function makeConfig(clusterUrl) {\n  var cluster = (0, exports.urlToCluster)(clusterUrl);\n  return {\n    cluster: cluster,\n    commitment: 'confirmed',\n    // this map instructs the POWO library to use clusterUrl\n    // to connect to the solana network. This avoids rate limiting issues with using the default\n    // public urls\n    supportedClusterUrls: _defineProperty({}, cluster, clusterUrl),\n    recentBlockCheck: false\n  };\n};\n\nexports.makeConfig = makeConfig;","map":{"version":3,"sources":["C:/development/milkybae/node_modules/@civic/solana-gateway-react/dist/esm/solana/config.js"],"names":["Object","defineProperty","exports","value","makeConfig","getGatekeeperEndpoint","GATEKEEPER_ENDPOINTS","urlToCluster","clusterEndpoint","web3_js_1","require","cluster","clusterApiUrl","clusterUrl","supportedClusters","matchedUrlCluster","find","matchedStringCluster","indexOf","solanaVersionedEndpoint","local","test","dev","preprod","prod","stage","endpoint","Error","commitment","supportedClusterUrls","recentBlockCheck"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,qBAAR,GAAgCH,OAAO,CAACI,oBAAR,GAA+BJ,OAAO,CAACK,YAAR,GAAuBL,OAAO,CAACM,eAAR,GAA0B,KAAK,CAA1I;;AACA,IAAMC,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAMF,eAAe,GAAG,SAAlBA,eAAkB,CAACG,OAAD,EAAa;AACjC,UAAQA,OAAR;AACI,SAAK,UAAL;AACI,aAAO,uCAAP;;AACJ,SAAK,UAAL;AACI,aAAO,uBAAP;;AACJ;AACI,aAAO,CAAC,GAAGF,SAAS,CAACG,aAAd,EAA6BD,OAA7B,CAAP;AANR;AAQH,CATD;;AAUAT,OAAO,CAACM,eAAR,GAA0BA,eAA1B,C,CACA;AACA;AACA;;AACA,IAAMD,YAAY,GAAG,SAAfA,YAAe,CAACM,UAAD,EAAgB;AACjC,MAAMC,iBAAiB,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,cAAtB,EAAsC,UAAtC,EAAkD,UAAlD,CAA1B;AACA,MAAMC,iBAAiB,GAAGD,iBAAiB,CAACE,IAAlB,CAAuB,UAACL,OAAD;AAAA,WAAa,CAAC,GAAGT,OAAO,CAACM,eAAZ,EAA6BG,OAA7B,MAA0CE,UAAvD;AAAA,GAAvB,CAA1B;AACA,MAAIE,iBAAJ,EACI,OAAOA,iBAAP;AACJ,MAAME,oBAAoB,GAAGH,iBAAiB,CAACE,IAAlB,CAAuB,UAACL,OAAD;AAAA,WAAaE,UAAU,CAACK,OAAX,CAAmBP,OAAnB,KAA+B,CAA5C;AAAA,GAAvB,CAA7B;AACA,MAAIM,oBAAJ,EACI,OAAOA,oBAAP;AACJ,SAAO,cAAP;AACH,CATD;;AAUAf,OAAO,CAACK,YAAR,GAAuBA,YAAvB;AACA,IAAMY,uBAAuB,GAAG,iBAAhC;AACAjB,OAAO,CAACI,oBAAR,GAA+B;AAC3Bc,EAAAA,KAAK,wCAAiCD,uBAAjC,CADsB;AAE3BE,EAAAA,IAAI,wCAAiCF,uBAAjC,CAFuB;AAG3BG,EAAAA,GAAG,iDAA0CH,uBAA1C,CAHwB;AAI3BI,EAAAA,OAAO,qDAA8CJ,uBAA9C,CAJoB;AAK3BK,EAAAA,IAAI,6CAAsCL,uBAAtC;AALuB,CAA/B;;AAOA,IAAMd,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACoB,KAAD,EAAW;AACrC,MAAMC,QAAQ,GAAGxB,OAAO,CAACI,oBAAR,CAA6BmB,KAA7B,CAAjB;;AACA,MAAI,CAACC,QAAL,EAAe;AACX,UAAM,IAAIC,KAAJ,yBAA2BF,KAA3B,EAAN;AACH;;AACD,SAAOC,QAAP;AACH,CAND;;AAOAxB,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC;;AACA,IAAMD,UAAU,GAAG,SAAbA,UAAa,CAACS,UAAD,EAAgB;AAC/B,MAAMF,OAAO,GAAG,CAAC,GAAGT,OAAO,CAACK,YAAZ,EAA0BM,UAA1B,CAAhB;AACA,SAAO;AACHF,IAAAA,OAAO,EAAPA,OADG;AAEHiB,IAAAA,UAAU,EAAE,WAFT;AAGH;AACA;AACA;AACAC,IAAAA,oBAAoB,sBACflB,OADe,EACLE,UADK,CANjB;AASHiB,IAAAA,gBAAgB,EAAE;AATf,GAAP;AAWH,CAbD;;AAcA5B,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeConfig = exports.getGatekeeperEndpoint = exports.GATEKEEPER_ENDPOINTS = exports.urlToCluster = exports.clusterEndpoint = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst clusterEndpoint = (cluster) => {\n    switch (cluster) {\n        case 'civicnet':\n            return 'https://d3ab7dlfud2b5u.cloudfront.net';\n        case 'localnet':\n            return 'http://localhost:8899';\n        default:\n            return (0, web3_js_1.clusterApiUrl)(cluster);\n    }\n};\nexports.clusterEndpoint = clusterEndpoint;\n// reverse lookup of cluster from url\n// note - this is a \"best-guess\" heuristic. If the client passes an unrecognised\n// url, default to mainnet\nconst urlToCluster = (clusterUrl) => {\n    const supportedClusters = ['devnet', 'testnet', 'mainnet-beta', 'civicnet', 'localnet'];\n    const matchedUrlCluster = supportedClusters.find((cluster) => (0, exports.clusterEndpoint)(cluster) === clusterUrl);\n    if (matchedUrlCluster)\n        return matchedUrlCluster;\n    const matchedStringCluster = supportedClusters.find((cluster) => clusterUrl.indexOf(cluster) >= 0);\n    if (matchedStringCluster)\n        return matchedStringCluster;\n    return 'mainnet-beta';\n};\nexports.urlToCluster = urlToCluster;\nconst solanaVersionedEndpoint = 'v1/token/solana';\nexports.GATEKEEPER_ENDPOINTS = {\n    local: `http://localhost:3001/local/${solanaVersionedEndpoint}`,\n    test: `http://localhost:3001/local/${solanaVersionedEndpoint}`,\n    dev: `https://dev-gatekeeper-api.civic.com/${solanaVersionedEndpoint}`,\n    preprod: `https://preprod-gatekeeper-api.civic.com/${solanaVersionedEndpoint}`,\n    prod: `https://gatekeeper-api.civic.com/${solanaVersionedEndpoint}`,\n};\nconst getGatekeeperEndpoint = (stage) => {\n    const endpoint = exports.GATEKEEPER_ENDPOINTS[stage];\n    if (!endpoint) {\n        throw new Error(`Invalid stage ${stage}`);\n    }\n    return endpoint;\n};\nexports.getGatekeeperEndpoint = getGatekeeperEndpoint;\nconst makeConfig = (clusterUrl) => {\n    const cluster = (0, exports.urlToCluster)(clusterUrl);\n    return {\n        cluster,\n        commitment: 'confirmed',\n        // this map instructs the POWO library to use clusterUrl\n        // to connect to the solana network. This avoids rate limiting issues with using the default\n        // public urls\n        supportedClusterUrls: {\n            [cluster]: clusterUrl,\n        },\n        recentBlockCheck: false,\n    };\n};\nexports.makeConfig = makeConfig;\n"]},"metadata":{},"sourceType":"script"}