{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GatewayTokenActionCreatorImplementation = void 0;\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\n\nconst types_1 = require(\"../types\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst utils_1 = require(\"./utils\");\n\nconst pollForActiveOnChainToken = async chainImplementation => {\n  return (0, utils_1.pollUntilConditionMet)(chainImplementation.findGatewayToken, onChainToken => {\n    if (!onChainToken) return false; // keep polling\n\n    if (onChainToken.state === solana_gateway_ts_1.State.ACTIVE) return true;\n    throw new Error('Token found but not ACTIVE');\n  }, 2000, // wait 2 seconds between retries\n  30 // poll 20 times\n  );\n};\n\nconst GatewayTokenActionCreatorImplementation = _ref => {\n  let {\n    wallet,\n    chainImplementation,\n    gatekeeperClient,\n    dispatch\n  } = _ref;\n\n  const logDebug = function (message) {\n    let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger_1.default.debug(`[useChain] ${message}`, obj);\n  };\n\n  const logError = function (message) {\n    let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger_1.default.error(`[useChain] ${message}`, obj);\n  };\n\n  const isTokenCreated = code => code === 200;\n\n  const isTokenPending = code => code === 202 || code === 404;\n\n  const isFailure = code => !isTokenPending(code) && code >= 400;\n\n  const waitForGatewayToken = async () => {\n    // poll the gatekeeper until we have a status for a created record\n    // if we don't get a created token, then we consider it a failure\n    try {\n      const token = await pollForActiveOnChainToken(chainImplementation);\n      logDebug('Result from pollForActiveOnChainToken', token);\n\n      if (!token) {\n        logError('Token not found onChain');\n        throw new Error('Token not found onChain');\n      }\n\n      dispatch({\n        type: 'tokenChange',\n        token\n      });\n      dispatch({\n        type: 'civicPass_check_token_status',\n        token\n      });\n      return;\n    } catch (error) {\n      logError('Failed to find Gateway token on-chain, checking with gatekeeper');\n      const state = await gatekeeperClient().getGatekeeperStatus(wallet.publicKey); // if the token is still pending or in review then keep polling on-chain\n\n      if (isTokenPending(state)) {\n        await waitForGatewayToken();\n      } // retries have been exhausted and we still don't have a token\n      // or the gatekeeper threw an error during issuance attempt\n\n\n      if (isTokenCreated(state) || isFailure(state)) {\n        logError('Failed to find Gateway token with gatekeeper status code', types_1.GatekeeperRecordState[state]);\n        dispatch({\n          type: 'tokenNotFoundError'\n        });\n      }\n    }\n  };\n\n  return {\n    waitForGatewayToken\n  };\n};\n\nexports.GatewayTokenActionCreatorImplementation = GatewayTokenActionCreatorImplementation;","map":{"version":3,"sources":["C:/development/milkybae/node_modules/@civic/solana-gateway-react/dist/esm/actionCreator/gatewayToken.actionCreator.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","GatewayTokenActionCreatorImplementation","solana_gateway_ts_1","require","types_1","logger_1","utils_1","pollForActiveOnChainToken","chainImplementation","pollUntilConditionMet","findGatewayToken","onChainToken","state","State","ACTIVE","Error","wallet","gatekeeperClient","dispatch","logDebug","message","obj","default","debug","logError","error","isTokenCreated","code","isTokenPending","isFailure","waitForGatewayToken","token","type","getGatekeeperStatus","publicKey","GatekeeperRecordState"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GatewayTokenActionCreatorImplementation = void 0;\n/* eslint-disable @typescript-eslint/no-unused-vars */\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\nconst types_1 = require(\"../types\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst utils_1 = require(\"./utils\");\nconst pollForActiveOnChainToken = async (chainImplementation) => {\n    return (0, utils_1.pollUntilConditionMet)(chainImplementation.findGatewayToken, (onChainToken) => {\n        if (!onChainToken)\n            return false; // keep polling\n        if (onChainToken.state === solana_gateway_ts_1.State.ACTIVE)\n            return true;\n        throw new Error('Token found but not ACTIVE');\n    }, 2000, // wait 2 seconds between retries\n    30 // poll 20 times\n    );\n};\nconst GatewayTokenActionCreatorImplementation = ({ wallet, chainImplementation, gatekeeperClient, dispatch, }) => {\n    const logDebug = (message, obj = null) => logger_1.default.debug(`[useChain] ${message}`, obj);\n    const logError = (message, obj = null) => logger_1.default.error(`[useChain] ${message}`, obj);\n    const isTokenCreated = (code) => code === 200;\n    const isTokenPending = (code) => code === 202 || code === 404;\n    const isFailure = (code) => !isTokenPending(code) && code >= 400;\n    const waitForGatewayToken = async () => {\n        // poll the gatekeeper until we have a status for a created record\n        // if we don't get a created token, then we consider it a failure\n        try {\n            const token = await pollForActiveOnChainToken(chainImplementation);\n            logDebug('Result from pollForActiveOnChainToken', token);\n            if (!token) {\n                logError('Token not found onChain');\n                throw new Error('Token not found onChain');\n            }\n            dispatch({ type: 'tokenChange', token });\n            dispatch({ type: 'civicPass_check_token_status', token });\n            return;\n        }\n        catch (error) {\n            logError('Failed to find Gateway token on-chain, checking with gatekeeper');\n            const state = await gatekeeperClient().getGatekeeperStatus(wallet.publicKey);\n            // if the token is still pending or in review then keep polling on-chain\n            if (isTokenPending(state)) {\n                await waitForGatewayToken();\n            }\n            // retries have been exhausted and we still don't have a token\n            // or the gatekeeper threw an error during issuance attempt\n            if (isTokenCreated(state) || isFailure(state)) {\n                logError('Failed to find Gateway token with gatekeeper status code', types_1.GatekeeperRecordState[state]);\n                dispatch({ type: 'tokenNotFoundError' });\n            }\n        }\n    };\n    return { waitForGatewayToken };\n};\nexports.GatewayTokenActionCreatorImplementation = GatewayTokenActionCreatorImplementation;\n"]},"metadata":{},"sourceType":"script"}